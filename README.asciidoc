ifndef::imagesdir[:imagesdir: images]

image:https://travis-ci.org/jboz/living-documentation.svg?branch=master["Build Status", link="https://travis-ci.org/jboz/living-documentation"]
image:https://img.shields.io/badge/PRs-welcome-brightgreen.svg["Make a pull request", link="http://makeapullrequest.com"]
image:https://img.shields.io/github/license/jboz/living-documentation.svg[License]
image:https://maven-badges.herokuapp.com/maven-central/ch.ifocusit.livingdoc/livingdoc-maven-plugin/badge.svg?style=flat["Maven Central", link="https://maven-badges.herokuapp.com/maven-central/ch.ifocusit.livingdoc/livingdoc-maven-plugin"]

Read CONTRIBUTING file to contrib and check the backlog on the trello board : https://trello.com/b/pabtQSZG/living-documentation

= Living documentation tools

Here is the mono-repository of many tools that will help you to generate a living documentation of your code.

This project is intended to provide some tools to allow a nice Living Documentation.

It based on http://asciidoctor.org/docs/what-is-asciidoc/[Asciidoctor], https://github.com/jboz/plantuml-builder[Plantuml Builder], and other nice tools...

See examples to show the powerfull ! You'll be able to generate beautiful documents with a simple configuration.
Create a living documentation from the code automatically. Easily customizable.

With or without annotations.

This java project is made of :

. Some java https://github.com/jboz/living-documentation/tree/master/livingdoc-annotations[annotations] (like https://github.com/jboz/living-documentation/blob/master/livingdoc-annotations/src/main/java/ch/ifocusit/livingdoc/annotations/UbiquitousLanguage.java[UbiquitousLanguage] annotation), but not mandatory
. A fully customizable https://github.com/jboz/living-documentation/tree/master/livingdoc-maven-plugin[maven plugin]

== Generate a conception diagram (svg format with link supported !)
image::conception-diagram.png[Asciidoctor Diagram javaClasses diagram]

== And a business glossary (with asciidoc syntax, also in table format)
like this example : https://github.com/jboz/living-documentation/tree/master/livingdoc-examples/microservice/

== Add gherkin description :
You can also integrate gherkin files like this example : link:livingdoc-examples/microservice/images/example_microservice_index.html.png[Microservice example generated index file]

If you want to separate gherkins files look at this example: link:livingdoc-examples/ddd/pom.xml[Domain Driven Design]

== Also allow to publish generated docs to confluence :
Publish specific HTML version to Altassian Confluence Server.
If you want to upload content to confluence look at this example: link:livingdoc-examples/ddd/pom.xml[Domain Driven Design]
Take car that you will have to use adoc format and let the publish goal to generate the html part

== With a light maven configuration :
[source,xml]
----
<plugin>
    <groupId>ch.ifocusit.livingdoc</groupId>
    <artifactId>livingdoc-maven-plugin</artifactId>
    <version>1.2</version>
    <executions>
        <execution>
            <id>class-diagram</id>
            <phase>package</phase>
            <goals>
                <goal>diagram</goal>
                <goal>glossary</goal>
            </goals>
        </execution>
    </executions>
    <configuration>
        <packageRoot>ch.ifocusit.telecom.domain</packageRoot>
        <interactive>true</interactive>
        <excludes>
            <exclude>.*domain.common.*</exclude>
        </excludes>
    </configuration>
</plugin>
----

See *https://github.com/jboz/living-documentation/tree/master/livingdoc-examples[livingdoc-examples]* for more uses cases.

Coin des développeurs : https://github.com/jboz/living-documentation/blob/master/DEV.md[readme développeur]
